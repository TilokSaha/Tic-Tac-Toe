{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","Array","fill","player","winner","WinLines","index","length","_WinLines$index","slicedToArray","a","b","c","setState","alert","newBoard","newPlayer","checkWin","_this2","Box","map","box","react_default","createElement","className","key","onClick","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCsEzBC,2BAjEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,MAAMC,MAAM,GAAGC,KAAK,MACpBC,OAAO,IACPC,OAAO,MALOZ,0EAqBhB,IAXA,IAAIa,EACJ,CACE,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,MAEHC,EAAM,EAAEA,EAAMD,EAASE,OAAOD,IACtC,KAAAE,EAAAf,OAAAgB,EAAA,EAAAhB,CACkBY,EAASC,GAD3B,GACSI,EADTF,EAAA,GACWG,EADXH,EAAA,GACaI,EADbJ,EAAA,GAEKb,KAAKI,MAAMC,MAAMU,IAAMf,KAAKI,MAAMC,MAAMU,KAAKf,KAAKI,MAAMC,MAAMW,IAAIhB,KAAKI,MAAMC,MAAMW,KAAKhB,KAAKI,MAAMC,MAAMY,KAG5GjB,KAAKkB,SAAS,CACZT,OAAOT,KAAKI,MAAMI,SAEpBW,MAAM,iDAKER,GAEV,IAAIS,EAAWpB,KAAKI,MAAMC,MACtBgB,EAAkC,MAAtBrB,KAAKI,MAAMI,OAAgB,IAAI,IAClB,OAA1BR,KAAKI,MAAMC,MAAMM,IAAkBX,KAAKI,MAAMK,SAE/CW,EAAST,GAAOX,KAAKI,MAAMI,OAC3BR,KAAKkB,SAAS,CACZb,MAAMe,EACNZ,OAAOa,IAETrB,KAAKsB,6CAKA,IAAAC,EAAAvB,KACDwB,EAAMxB,KAAKI,MAAMC,MAAMoB,IAAI,SAACC,EAAIf,GAAL,OAAegB,EAAAZ,EAAAa,cAAA,OAAKC,UAAU,MAAMC,IAAKnB,EAAOoB,QAAS,kBAAIR,EAAKS,YAAYrB,KAASe,KACxH,OACEC,EAAAZ,EAAAa,cAAA,OAAKC,UAAU,aACfF,EAAAZ,EAAAa,cAAA,yBACAD,EAAAZ,EAAAa,cAAA,OAAKC,UAAU,SACdL,WA1DWS,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAZ,EAAAa,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b2b6187b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      board:Array(9).fill(null),\n      player:\"X\",\n      winner:null,\n    }\n  }\n  checkWin()\n  {\n    let WinLines=\n    [\n      [\"0\",\"1\",\"2\"],\n      [\"3\",\"4\",\"5\"],\n      [\"6\",\"7\",\"8\"],\n      [\"0\",\"3\",\"6\"],\n      [\"1\",\"4\",\"7\"],\n      [\"2\",\"5\",\"8\"],\n      [\"0\",\"4\",\"8\"],\n      [\"2\",\"4\",\"6\"],\n    ]\n    for(let index=0;index<WinLines.length;index++)\n    {\n      const [a,b,c] = WinLines[index];\n      if(this.state.board[a] && this.state.board[a]===this.state.board[b]&&this.state.board[b]===this.state.board[c])\n    {\n      \n      this.setState({\n        winner:this.state.player\n      })\n      alert(\"You won\");\n    }\n    }\n    \n  }\n  handleClick(index)\n  {\n    let newBoard = this.state.board;\n    let newPlayer = this.state.player === \"X\"? \"O\":\"X\";\n    if(this.state.board[index]===null && !this.state.winner)\n    {\n      newBoard[index]=this.state.player;\n      this.setState({\n        board:newBoard,\n        player:newPlayer\n      })\n      this.checkWin();\n    }\n    \n    \n  }\n  render() {\n    const Box = this.state.board.map((box,index) => <div className=\"box\" key={index} onClick={()=>this.handleClick(index)}>{box}</div>)\n    return ( \n      <div className=\"container\">\n      <h1>Tic Tac Toe</h1>\n      <div className=\"board\">\n      {Box}\n      \n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}